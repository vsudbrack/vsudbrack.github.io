<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-22T19:50:55+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Vitor Sudbrack</title><subtitle>The personal homepage of Vitor Sudbrack</subtitle><author><name>Vitor Sudbrack</name></author><entry><title type="html">A colorful terminal for scientists</title><link href="http://localhost:4000/page/update/coloring_terminal.html" rel="alternate" type="text/html" title="A colorful terminal for scientists" /><published>2020-11-10T00:00:00+01:00</published><updated>2020-11-10T00:00:00+01:00</updated><id>http://localhost:4000/page/update/coloring_terminal</id><content type="html" xml:base="http://localhost:4000/page/update/coloring_terminal.html">&lt;p&gt;Make your experience navigating in your files through the terminal nicer coloring your different types of files (folders, datasets, codes, …) with this simple tutorial.&lt;/p&gt;

&lt;p&gt;Here you can see, for instance, blue background for folders, green background for code files and pink background for data files - easy to spot each of them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../assets/img/blog/exemple_dircolors.png&quot; alt=&quot;Example of colorful terminal&quot; style=&quot;max-width: 90%;border: 2px solid #FFFFFF;border-radius: 28px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;making-your-experience-nicer&quot;&gt;Making your experience nicer&lt;/h2&gt;

&lt;p&gt;Recently, I was searching some templates of colors to &lt;strong&gt;ls&lt;/strong&gt; command (among others that also use them) and I came across this Github &lt;a href=&quot;https://github.com/arcticicestudio/nord-dircolors&quot;&gt;nord-dircolors&lt;/a&gt;, where I downloaded and started using their &lt;a href=&quot;https://github.com/arcticicestudio/nord-dircolors/blob/develop/src/dir_colors&quot;&gt;~/.dircolors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But then I realized that yet, it was not optimized for my needs (and I imagine other scientists), where I typically classify my files as pdfs (&lt;del&gt;which I promise I’ll read one day&lt;/del&gt;), databases (from NumPy, or datasets in csv, outputs  in .dat,…) and, most importantly, my executable codes (from Python, R, gnuplot,…).&lt;/p&gt;

&lt;p&gt;Therefore, I wanted to change a bit the nord-dircolors template in order to be very easy to identify these kinds of files from my terminal. I’ll share here the experience I had changing it, showing how I added my most used extensions to the &lt;em&gt;dircolors&lt;/em&gt; file.&lt;/p&gt;

&lt;h4 id=&quot;how-to-change-colors-in-dircolors&quot;&gt;How to change colors in dircolors&lt;/h4&gt;

&lt;p&gt;So if you open the original file &lt;em&gt;~/.dircolors&lt;/em&gt;, from &lt;a href=&quot;https://github.com/arcticicestudio/nord-dircolors/blob/develop/src/dir_colors&quot;&gt;nord-dircolors&lt;/a&gt; or whatever base you’ll prefer to work on, you’ll see extensions of files and numbers. I’ll briefly explain the meaning of each number that belongs to the triple you see separated by a semicolon:&lt;/p&gt;

&lt;p&gt;The first number is for formatting the text:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;00     to restore default color
01     for bold text
04     for underlined text
05     for flashing text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second stands for choosing the letter-color of the text:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;30     for black letters
31     for red letters
32     for green letters
33     for yellow (or brown) letters
34     for blue letters
35     for purple letters
36     for cyan letters
37     for white (or gray) letters
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the last one indicates the background-color of the text:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;40     for black background
41     for red background
42     for green background
43     for yellow (or brown) background
44     for blue background
45     for pink (or purple) background
46     for cyan background
47     for white (or gray) background
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But notice that they are all different, so actually the order doesn’t matter here (01;30;40 would be the same as 40;01;30). I’ll keep the order just to be easier to read our alterations. The “actual” colors depend on the palette of colors of your terminal (and you can alter it opening a terminal, and &lt;em&gt;Edit&amp;gt;Preferences&amp;gt;Profile&amp;gt;Colors&lt;/em&gt;). In the picture I showed before, I’m using ‘system theme’ of Ubuntu 18.04 and the palette &lt;strong&gt;Solarized&lt;/strong&gt;. (Another hint since you opened this tab is changing the &lt;strong&gt;cursor shape&lt;/strong&gt; from &lt;em&gt;box&lt;/em&gt; to &lt;em&gt;underline&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&quot;editing-the-colors&quot;&gt;Editing the colors&lt;/h2&gt;

&lt;p&gt;In your &lt;em&gt;~/.bashrc&lt;/em&gt;, you have to add a couple of lines to tell the terminal to search for a file called &lt;em&gt;~/.dircolors&lt;/em&gt;, and if existent, to use it as your default coloring. If it doesn’t have this block of text, add it there:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors &amp;amp;&amp;amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we wrote in our &lt;em&gt;~/.bashrc&lt;/em&gt; some &lt;strong&gt;aliases&lt;/strong&gt; so that the commands actually use the colors… if you don’t know what they do, maybe you’ll enjoy this older post &lt;strong&gt;&lt;a href=&quot;/page/update/tips_for_alias.html&quot;&gt;Creating &lt;em&gt;aliases&lt;/em&gt; on Ubuntu&lt;/a&gt;&lt;/strong&gt;, there I listed several other examples.&lt;/p&gt;

&lt;p&gt;In your &lt;em&gt;~/.dircolors&lt;/em&gt; file (the one you download from &lt;a href=&quot;https://github.com/arcticicestudio/nord-dircolors/blob/develop/src/dir_colors&quot;&gt;nord-dircolors&lt;/a&gt; or other source), first change your folders to bold white-letters in blue-background, altering the line that starts with DIR to&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DIR 01;37;44
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, add at the bottom of the file the extension of your codes (and here are listed my most used extensions, feel free to add yours!) to bold white-letter with green-background, for instance:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#+--- Codes ---+
.py 01;37;42
.R 01;37;42
.Rmd 01;37;42
.gp 01;37;42
.md 01;37;42
.m 01;37;42
.c 01;37;42
.cpp 01;37;42
.html 01;37;42
.sh 01;37;42
.awk 01;37;42
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And, after that, add your datasets and sheets extensions to bold white-letter in red-background:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#+--- Datasets and sheets ---+
.txt 01;37;45
.dat 01;37;45
.foo 01;37;45
.csv 01;37;45
.npy 01;37;45
.npz 01;37;45
.xls 01;37;45
.xlsx 01;37;45
.odt 01;37;45
.ott 01;37;45
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Probably by now you got the idea of how to add extensions to this list in a colorful way! Be creative to what serves you best :smile:&lt;/p&gt;

&lt;p&gt;Finally, I should mention we alter the user configurations. If you move the &lt;em&gt;.dircolors&lt;/em&gt; from &lt;em&gt;~/&lt;/em&gt; to &lt;em&gt;/etc/DIR_COLORS&lt;/em&gt;, then you will add a system-wide configuration file, and alterations will happen to all users.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you for reading up to here and I hope you found it useful for you. Take your time to also adapt the extensions to your most frequent types of files… and if you do so, tweet or DM me at &lt;em&gt;&lt;a href=&quot;https://twitter.com/vitorsudbrack&quot;&gt;@vitorsudbrack&lt;/a&gt;&lt;/em&gt; with your &lt;strong&gt;new extensions added to the lists&lt;/strong&gt;, it will be nice to hear them from you and I look forward to maybe using them too.&lt;/p&gt;</content><author><name>Vitor Sudbrack</name></author><summary type="html">Make your experience navigating in your files through the terminal nicer coloring your different types of files (folders, datasets, codes, …) with this simple tutorial.</summary></entry><entry><title type="html">Scheduling programs to run with crontab</title><link href="http://localhost:4000/page/update/tips_for_crontab.html" rel="alternate" type="text/html" title="Scheduling programs to run with &lt;i&gt;crontab&lt;/i&gt;" /><published>2020-10-02T00:00:00+02:00</published><updated>2020-10-02T00:00:00+02:00</updated><id>http://localhost:4000/page/update/tips_for_crontab</id><content type="html" xml:base="http://localhost:4000/page/update/tips_for_crontab.html">&lt;p&gt;Tired of repeating the same command every once-in-a while? Looking forward to creating automated jobs? Then, I think you’ll enjoy this tutorial.&lt;/p&gt;

&lt;p&gt;I’ll briefly introduce the &lt;em&gt;crontab&lt;/em&gt; mechanism, how to add commands to it with some of my recommendations and finally an idea of internet scrapping you could make with &lt;em&gt;crontab&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-crontab&quot;&gt;What is &lt;em&gt;crontab&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Crontab is a mechanism to schedule the execution of command lines with specific frequencies&lt;/strong&gt;. For instance, if you run a program everyday, you can add it to your crontab and the computer will run it automatically everyday (as long as the computer is on). Sounds like magic to your ears, doesn’t it? Yes, it will save you lots of work.&lt;/p&gt;

&lt;p&gt;During any terminal session, you can enter the command line&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; crontab -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and it will &lt;strong&gt;show you all scheduled commands&lt;/strong&gt; for your user (each user has different &lt;em&gt;crontab&lt;/em&gt;s).&lt;/p&gt;

&lt;h4 id=&quot;how-to-edit-it&quot;&gt;How to edit it&lt;/h4&gt;

&lt;p&gt;When &lt;strong&gt;adding new commands&lt;/strong&gt; to your &lt;em&gt;crontab&lt;/em&gt;, keep in mind that it is not an ordinary text file (like &lt;em&gt;~/.bashrc&lt;/em&gt;, and so on) and it cannot be edited by regular text editors (like Gedit, Emacs,…). To edit it, enter the crontab command with the flag ‘-e’ for editing,&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;on your shell. It will probably ask you for a text editor of your choice, and then you proceed from there as you write to regular files.  At this point, the text editor will open your &lt;em&gt;crontab&lt;/em&gt; and you will see the following syntax (so-called &lt;em&gt;Crontab Macros&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@yearly    #Run once a year  (at 0a.m. of January 1st)
@monthly   #Run once a month (at 0a.m. of the 1st day)
@weekly	   #Run once a week  (at 0a.m. of Sunday)
@daily     #Run once a day   (at 0a.m.)
@hourly	   #Run once an hour at the beginning of the hour
@reboot	   #Run at startup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Therefore, you basically &lt;strong&gt;enter in every line a frequency with one Crontab Macro, and one command to be run.&lt;/strong&gt; The examples in the next section you’ll help you understand it, make sure you check them out before editing.&lt;/p&gt;

&lt;p&gt;I should mention that &lt;strong&gt;there is a more generic syntax&lt;/strong&gt; than Macros, which allows you to run codes every minute, every 5 hours, every other day, etc. It is based on values for minute (m), hour (h), day of month (dom), month (mon) and day of week (dom). There are plenty of &lt;a href=&quot;https://code.tutsplus.com/tutorials/scheduling-tasks-with-cron-jobs--net-8800&quot;&gt;tutorials&lt;/a&gt; that focus on this syntax, so in this tutorial, we’ll skip these details and get to the practical examples with Macros.&lt;/p&gt;

&lt;p&gt;Finally, after editing as much as you wish, remember when closing your &lt;em&gt;crontab&lt;/em&gt; you can either &lt;strong&gt;save your modifications&lt;/strong&gt; typing &lt;em&gt;CTRL+X&lt;/em&gt;,&lt;em&gt;Y&lt;/em&gt;,&lt;em&gt;Enter&lt;/em&gt; to close and save, or type &lt;em&gt;CTRL+X&lt;/em&gt;,&lt;em&gt;N&lt;/em&gt;,&lt;em&gt;Enter&lt;/em&gt; to discard any possible changes you might have done.&lt;/p&gt;

&lt;p&gt;Also, if you want more about the theory and history of &lt;em&gt;crontab&lt;/em&gt;, check its &lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;Wikipage&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;some-examples-to-make-your-life-easier&quot;&gt;Some examples to make your life easier&lt;/h2&gt;
&lt;p&gt;I’ll list here some of my favorite commands to have on your &lt;em&gt;crontab&lt;/em&gt;, you can simply write them in your crontab with the flag ‘-e’ (remember you cannot edit it from regular editors). I tried to organize them by frequency, and at the end the more complex examples.&lt;/p&gt;

&lt;p&gt;Keep in mind that &lt;strong&gt;running all jobs hourly (when they only need to run once a day) is overkill for resources if it is not extremely necessary&lt;/strong&gt;, and might slow down other processes. That is why I start with daily frequencies, but examples are very interchangeable.&lt;/p&gt;

&lt;p&gt;Before getting to business, a reminder: &lt;strong&gt;writing the output of a command to an output-file is highly recommended&lt;/strong&gt; and it can be done with a closing bracket (&amp;gt;), but that will rewrite the output file every time (and so you only have the last output). If you would like to keep a record of output logs, then by using two closing brackets (&amp;gt;&amp;gt;) you will append the last output in the end of the file with previous output.&lt;/p&gt;

&lt;h4 id=&quot;run-codes-every-day&quot;&gt;Run codes every day&lt;/h4&gt;

&lt;p&gt;Everyday you can &lt;strong&gt;clear your cache files that are celebrating birthday&lt;/strong&gt;, ie. that are 1-year old. With this simple line in your &lt;em&gt;crontab&lt;/em&gt;, you will remove all files within &lt;em&gt;~/.cache&lt;/em&gt; whose last modification date is more than 365 days ago.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@daily chronic find ~/.cache -depth -type f -mtime +365 -delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will avoid you saving things of websites you hardly visited the last year and have more space for the files that matter :+1:&lt;/p&gt;

&lt;p&gt;You also can &lt;strong&gt;daily check for updates of your programs and your packages&lt;/strong&gt;, some routine of maintenance of your PC would be like&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LOGFILE=&quot;$/.script/outputs/autoupdate_daily.log&quot;
@daily sudo apt-get update 	     &amp;gt;&amp;gt; $LOGFILE
@daily sudo apt-get upgrade -y       &amp;gt;&amp;gt; $LOGFILE
@daily sudo apt-get autoremove -y    &amp;gt;&amp;gt; $LOGFILE
@daily sudo apt-get autoclean -y     &amp;gt;&amp;gt; $LOGFILE
@daily rm -rf ~/.local/share/Trash/* &amp;gt;&amp;gt; $LOGFILE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;updating, upgrading, cleaning expired packages and the trash can&lt;/strong&gt; every day at midnight.&lt;/p&gt;

&lt;h4 id=&quot;run-codes-whenever-you-reboot-your-computer&quot;&gt;Run codes whenever you reboot your computer&lt;/h4&gt;

&lt;p&gt;The macro &lt;em&gt;@reboot&lt;/em&gt; is the one I use the most! It is extremely helpful either if you have problems with &lt;strong&gt;screen resolution&lt;/strong&gt;, your &lt;strong&gt;keyboard layout&lt;/strong&gt; or even to &lt;strong&gt;mount devices everytime you reboot your computer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once I had problems with screen resolution and I solved installing &lt;em&gt;xrandr&lt;/em&gt; and adding this line to my &lt;em&gt;crontab&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@reboot xrandr -s 800x600 -r 85 --output HDMI-0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice it might change depending on the output and ideal resolution to your device.&lt;/p&gt;

&lt;p&gt;And it your keyboard configurations reset every time your computer reboot, then you can reset the keyboard layout everytime you reboot your machine with&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@reboot setxkbmap -layout br
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &lt;em&gt;br&lt;/em&gt; is an example.&lt;/p&gt;

&lt;p&gt;And whenever I reboot my computer, I need to mount my HD to the folder &lt;em&gt;MyHD&lt;/em&gt;. Instead of doing it manually, &lt;em&gt;crontab&lt;/em&gt; does the trick with&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@reboot sudo mount -t ext4 /dev/sda /media/vsud/MyHD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When &lt;strong&gt;commands require internet connection&lt;/strong&gt;, you should be aware that the &lt;em&gt;@reboot&lt;/em&gt; possibly runs even before the computer settles internet connection. One strategy is to run these commands after a 5-minute sleep in order to make sure that the computer has had time to have proper internet access. For instance, you can run&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@reboot sleep 5m &amp;amp;&amp;amp; ping 8.8.8.8 -c 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;but of course this example doesn’t make anything special, even so I leave the example here because it is helpful to develop further commands that require the internet.&lt;/p&gt;

&lt;h4 id=&quot;automated-robots&quot;&gt;Automated robots&lt;/h4&gt;

&lt;p&gt;First, to &lt;strong&gt;automate one program&lt;/strong&gt; :robot:, you have to call it from the &lt;em&gt;crontab&lt;/em&gt; and not write it directly there. So in the &lt;em&gt;crontab&lt;/em&gt; there is no big deal, just use something like&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@hourly bash $/scripts/update_cases_covid19.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, the &lt;strong&gt;tricks lay in the &lt;em&gt;.sh&lt;/em&gt; file&lt;/strong&gt; you are writing. For instance, when writing a script to be executed periodically, you should be careful to &lt;strong&gt;prevent job collision&lt;/strong&gt; - that is, if the program takes 2h to run and you run it hourly, we’ll be running the same code simultaneously, and that’s not what we usually want. 
Therefore, you should make sure that there isn’t any other similar process still running before trying to start running it again. You can make this control with this following structure.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUNFILE=&quot;my_flag.run&quot;     #Come up with a generic name...
if [ -f $RUNFILE ]; then  #If the program is still running
    exit                  #simply exit. 
fi
touch $RUNFILE            #Otherwise, register that you're starting an execution.
##################################
# All commands you want to     ###
# automatize go here in middle ###
##################################
rm $RUNFILE               #Once finished, remove this register. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One example is using &lt;em&gt;curl&lt;/em&gt; command to download a news webpage everyday. Several platforms such as Youtube and Spotify have free API in which you can also download data from these websites and keep a historical dataset on your computer, or even with Github commands to pull or push repositories.  Afterwards, you can process these downloaded datasets and search for keywords of your interest or check its time behaviours.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I thank Professor &lt;strong&gt;Renato Coutinho&lt;/strong&gt; who taught me this nice trick using it to create robots to analyse COVID-19 data in Brazil.&lt;/p&gt;

&lt;p&gt;I also thank you for reading up to here and I hope you found it useful for you! Tweet or DM me at &lt;em&gt;&lt;a href=&quot;https://twitter.com/vitorsudbrack&quot;&gt;@vitorsudbrack&lt;/a&gt;&lt;/em&gt; if you have any &lt;strong&gt;new ideas of exemples to add to the list&lt;/strong&gt;, it will be nice to hear them from you and I look forward to using them too.&lt;/p&gt;</content><author><name>Vitor Sudbrack</name></author><summary type="html">Tired of repeating the same command every once-in-a while? Looking forward to creating automated jobs? Then, I think you’ll enjoy this tutorial.</summary></entry><entry><title type="html">Creating aliases on Ubuntu</title><link href="http://localhost:4000/page/update/tips_for_alias.html" rel="alternate" type="text/html" title="Creating &lt;i&gt;aliases&lt;/i&gt; on Ubuntu" /><published>2020-09-15T00:00:00+02:00</published><updated>2020-09-15T00:00:00+02:00</updated><id>http://localhost:4000/page/update/tips_for_alias</id><content type="html" xml:base="http://localhost:4000/page/update/tips_for_alias.html">&lt;p&gt;Trying to be more productive and to have an easier experience with Ubuntu? So, I guess you’ll enjoy the &lt;em&gt;alias&lt;/em&gt; command as much as I do! Check here &lt;strong&gt;what they are&lt;/strong&gt;, &lt;strong&gt;how they work&lt;/strong&gt; and a &lt;strong&gt;few suggested aliases&lt;/strong&gt; to have on your computer.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-alias&quot;&gt;What is an Alias?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Alias&lt;/strong&gt; is shell command to create nicknames to abbreviate longer commands during a section on your Ubuntu terminal (and here I’m using &lt;em&gt;Ubuntu 18&lt;/em&gt;, but most commands are simple enough to run in any other version). But because we know that our terminals always run the file &lt;em&gt;~/.bashrc&lt;/em&gt; of your home folder in the begging of every new session, you can write &lt;em&gt;aliases&lt;/em&gt; on this file and have them forever! &lt;del&gt;(or until you use someone else’s computer and feel totally lost)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;During any session, you can enter the command line&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and it will &lt;strong&gt;show you all valid &lt;em&gt;aliases&lt;/em&gt;&lt;/strong&gt; in your current session. To &lt;strong&gt;add a new alias&lt;/strong&gt; to your session (or to your &lt;em&gt;~/.bashrc&lt;/em&gt;), enter&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias Shortname='Long Command Line'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;on your shell (double primes instead of single primes will work just as well).&lt;/p&gt;

&lt;p&gt;You can learn more about &lt;em&gt;aliases&lt;/em&gt; on this &lt;a href=&quot;https://en.wikipedia.org/wiki/Alias_(command)&quot;&gt;Wikipage&lt;/a&gt;. Here, I’ll skip to the practice and share with you &lt;del&gt;(and future me as a backup)&lt;/del&gt; the ones I use the most.&lt;/p&gt;

&lt;h2 id=&quot;a-list-of-recommanded-alias&quot;&gt;A list of recommanded alias&lt;/h2&gt;
&lt;p&gt;I’ll list here some of my favorite &lt;strong&gt;aliases&lt;/strong&gt; to have on your &lt;em&gt;~/.bashrc&lt;/em&gt;, you can simple copy and paste them into your own file. I tried to organize them in a meaningful way that makes it easy to understand and easy to come up with your own ideas of &lt;em&gt;aliases&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;navigation&quot;&gt;Navigation&lt;/h4&gt;
&lt;p&gt;Let’s start &lt;strong&gt;navigating quickly&lt;/strong&gt; through the terminal:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias ..='cd ..'          #One folder up
&amp;gt; alias ...='cd ../..'      #Two folders up
&amp;gt; alias ....='cd ../../..'  #Three folders up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and here you can also add ‘cd ~/favorite_folders’ (remember to use always absolute paths to folders). For exemple, to acess the folder where I mount my External HD, I just type &lt;em&gt;cdhd&lt;/em&gt; and the alias makes the trick with&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias cdhd='cd /media/vsud/MyHD'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, remember you can always go to your &lt;em&gt;home folder&lt;/em&gt; with a simple ‘cd’ (without any argument).&lt;/p&gt;

&lt;h4 id=&quot;quick-use---one-letter&quot;&gt;Quick use - one letter&lt;/h4&gt;
&lt;p&gt;Some command lines are so recurrent that &lt;strong&gt;they deserve one letter&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias l='ls -CF'
&amp;gt; alias h='history'
&amp;gt; alias c='clear'
&amp;gt; alias e='exit'
&amp;gt; alias u='sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y &amp;amp;&amp;amp; sudo apt-get autoclean'
&amp;gt; alias j='jobs -l'
&amp;gt; alias o='xdg-open' #Opens files with default application
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and now you see how to use alias to &lt;strong&gt;execute multiple commands at the same alias: &amp;amp;&amp;amp;&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;colors-for-files&quot;&gt;Colors for files&lt;/h4&gt;
&lt;p&gt;Add some &lt;strong&gt;colors&lt;/strong&gt; to your terminal, and show files and folders variously:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias ls='ls --color=auto' #Adds color to your ls in all cases
&amp;gt; alias la='ls -A'           #List all files and folders in columns (including hidden)
&amp;gt; alias ll='ls -alFh'        #List all files and folders in rows (including hidden)
&amp;gt; alias lr='ls -ltrh'        #List files and folders in rows by recent modified
&amp;gt; alias l.='ls -d .*'        #List only hidden directories in columns
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This last example is very insightful to search for extensions you use the most, as in&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias lcodes=&quot;echo 'Python:';ls *.py;echo 'R:';ls *.R;echo 'Gnuplot:';ls *.gp&quot;  #List all .py, .R e .gp separately
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And if you used alias to add flags to one command and maintained the same name of the original command (as we did with ‘ls’ up here), don’t worry: if you ever need the &lt;strong&gt;original command&lt;/strong&gt; for some reason, you can always use it by &lt;strong&gt;starting with a backslash&lt;/strong&gt;, e.g. ‘\ls’ is the original non-colored ‘ls’ command. Some other examples are:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias dir='dir --color=auto'
&amp;gt; alias egrep='egrep --color=auto'
&amp;gt; alias grep='grep --color=auto'
&amp;gt; alias fgrep='fgrep --color=auto'
&amp;gt; alias df='df -h'               #Size of files in KB, MB,...
&amp;gt; alias bc='bc -lqi'             #Calculator with libraries
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;quick-use---two-letters&quot;&gt;Quick use - two letters&lt;/h4&gt;
&lt;p&gt;Some command lines are very useful and &lt;strong&gt;they deserve two or three letters&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias py='python3'
&amp;gt; alias ipy='ipython3'
&amp;gt; alias gp='gnuplot'
&amp;gt; alias rr='Rscript'
&amp;gt; alias now='date +&quot;%d-%m-%Y %T&quot;' #This one is useful in some contexts of automated logs
&amp;gt; alias mnt=&quot;mount | awk -F' ' '{ printf \&quot;%s\t%s\n\&quot;,\$1,\$3; }' | column -t | egrep ^/dev/ | sort&quot; #Show all mounted devices at /dev/...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;github-users-best-friends&quot;&gt;Github users’ best friends&lt;/h4&gt;
&lt;p&gt;Aliases make our lives of &lt;strong&gt;add, commit, pull and push&lt;/strong&gt; way faster… but be careful - don’t use generic commit messages if you work in a collective repository!&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias gs='git status'
&amp;gt; alias gl='git pull'
&amp;gt; alias gp='git push'
&amp;gt; alias ga='git add .' # Add all modified files
&amp;gt; alias gc='git commit -m' 
&amp;gt; alias gb='git branch'
&amp;gt; alias gco='git checkout'
&amp;gt; alias gf='git status &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &quot;Updates&quot; &amp;amp;&amp;amp; git push' # Only do this if it's your private repository...
&amp;gt; alias run_jekyll='bundle exec jekyll serve' # Useful if you have a website in jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;control-your-cpu-clocking&quot;&gt;Control your CPU clocking&lt;/h4&gt;
&lt;p&gt;If you have installed &lt;em&gt;&lt;a href=&quot;http://manpages.ubuntu.com/manpages/bionic/man1/cpufreq-set.1.html&quot;&gt;cpufreq&lt;/a&gt;&lt;/em&gt; package, you can &lt;strong&gt;control your clocking&lt;/strong&gt; and get information with&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias highclock='sudo cpufreq-set -r -g performance &amp;amp;&amp;amp; cpufreq-info'
&amp;gt; alias lowclock='sudo cpufreq-set -r -g powersave &amp;amp;&amp;amp; cpufreq-info'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;so before running a simulation run &lt;em&gt;highclock&lt;/em&gt;, and then return to the regular state by &lt;em&gt;lowclock&lt;/em&gt;. Using highclock nonstop might harm your hardware by overheating it and overwasting the battery, so keep those things in mind!&lt;/p&gt;

&lt;h4 id=&quot;log-to-your-remote-machines&quot;&gt;Log to your remote machines&lt;/h4&gt;
&lt;p&gt;You can use it to quickly save the addresses or accesses of servers and remote machines, you can use for instance&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias uni_server='ssh -X debian@186.217.XXX.XX'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;aliases-that-help-clumsy-people&quot;&gt;Aliases that help clumsy people&lt;/h4&gt;
&lt;p&gt;Your common typos can become your helpful aliases: this way you save time from retyping command lines. Some examples:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias pdw='pwd'
&amp;gt; alias dc='cd' #If you ever need the actual calculator dc, use \dc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;make-your-own-bash-scripts&quot;&gt;Make your own bash scripts&lt;/h4&gt;
&lt;p&gt;Sometimes I had matrices in a file and I wanted to transpose them quickly into a new file. So, I opened a hidden folder &lt;em&gt;~/.scripts/&lt;/em&gt; in my home folder with an &lt;a href=&quot;https://stackoverflow.com/questions/1729824/an-efficient-way-to-transpose-a-file-in-bash&quot;&gt;algorithm&lt;/a&gt; in &lt;em&gt;awk&lt;/em&gt; to transpose files. Finally, I wrote an alias that accesses this ‘hidden file’ so that it becomes the simple terminal line &lt;em&gt;transpose&lt;/em&gt;…&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; alias transpose='awk -f ~/.scripts/transpose.awk'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and you can do the same using &lt;em&gt;Bash scripts&lt;/em&gt;, &lt;em&gt;awk&lt;/em&gt;, &lt;em&gt;Python&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, and so on, to your most recurrent needs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you for reading up to here and I hope you enjoyed this list of useful &lt;strong&gt;alias&lt;/strong&gt;! &lt;a href=&quot;https://twitter.com/vitorsudbrack/status/1305998416816807942?s=20&quot;&gt;&lt;strong&gt;Retweet&lt;/strong&gt; this post&lt;/a&gt;, tweet or DM me at &lt;em&gt;&lt;a href=&quot;https://twitter.com/vitorsudbrack&quot;&gt;@vitorsudbrack&lt;/a&gt;&lt;/em&gt; if you have any &lt;strong&gt;new ideas to add to the list&lt;/strong&gt;, I’ll be happy to hear them from you and start using them too.&lt;/p&gt;

&lt;p&gt;Last update on Oct, 2nd. with more examples.&lt;/p&gt;</content><author><name>Vitor Sudbrack</name></author><summary type="html">Trying to be more productive and to have an easier experience with Ubuntu? So, I guess you’ll enjoy the alias command as much as I do! Check here what they are, how they work and a few suggested aliases to have on your computer.</summary></entry></feed>